I have implemented this task and will summarize next what i did, my findings and results:

1. Started by reading the tutorial, understanding the concepts in it and reimplementing the code in it then working on the mnist dataset.

2. Solved a bug in the following block
shapes = qml.SimplifiedTwoDesign.shape(n_layers=1, n_wires=4)
weights = [np.random.random(size=shape)  for shape in shapes]
template_weights = [np.array(weights, dtype="object")]*3
fig, ax = qml.draw_mpl(circuit, expansion_strategy="device")(template_weights)
had to add np.array(weights, dtype="object") instead of only weights to get rid of the error

3. The dataset had a very huge number of images, 60000, and used only 100 images for training.

4. The tutorial uses basis encoding so the image should contain only 0's and 1's, so I changed the values in the image to be only 0 or 1. Instead of a value being between the range 0 and 255 for each pixel which of course leads to losing some information.

5. The image was 28*28 pixels which needed 28*28 number of qubits which cannot be implemented. So I had to combine every 49 pixels into one to get a 4 by 4 pixels image (16 total pixels, 16 qubits) which of course leads to losing a lot of information. Also the list containing the values 0 and 1 cannot be of 2 dimensions or more so the list should be flattened into a list that does not contain multiple lists.

6. Took around between 0.5 to 0.75 hours to train on google colab.

7. The cost function to train the circuit is not related to the problem and needs to be changed but trained using the same cost function in the tutorial.

8. Two notebooks are attached: (1) contains more images for the last cell as that plotted in the tutorial. (2) without the images generated by the last cell to use if the first notebook (1) had problems in opening or saving due to size.
